@using Microsoft.Extensions.Logging
@using System.ComponentModel

@*
    PWAアップデーター Blazorコンポーネント
    Service Workerによる新バージョン検出時に通知バーを表示し、
    ユーザーに更新の選択肢を提供するUIコンポーネント
*@
@implements IDisposable
@inject IPWAUpdaterService PWAUpdaterService
@inject ILogger<PWAUpdater> Logger

@*
    通知バーのUI表示
    状態に応じて表示/非表示を切り替え、位置指定（上部/下部）とアニメーション効果を提供
*@
@if (this.State != States.Hidden)
{
    <div class="@("pwa-updater" + (this.State == States.Shown ? " visible" : "") + (this.Align == Aligns.Top ? " align-top" : " align-bottom"))">
        @ChildContent
        <span>@this.Text</span>
        <button @onclick="OnClickUpdateNowAsync" class="pwa-updater-updatenow-button">@this.ButtonCaption</button>
        <span @onclick="OnClickClose" class="pwa-updater-close-button">✕</span>
    </div>
}

@code {

    /// <summary>
    /// PWAアップデーターコンポーネントの表示状態
    /// アニメーション効果を含む表示/非表示の状態管理
    /// </summary>
    public enum States
    {
        Hidden,     // 非表示
        Showing,    // 表示中（アニメーション）
        Shown,      // 表示完了
        Hiding      // 非表示中（アニメーション）
    }

    /// <summary>
    /// コンポーネントの現在の表示状態を取得または設定<br/>
    /// コンポーネントが表示中の際に外部から <see cref="States.Shown"/> から <see cref="States.Hiding"/> に設定して非表示にできます。<br/>
    /// また、開発用途としてService Workerの新バージョンが存在しない場合でも <see cref="States.Showing"/> に明示的に設定して強制的に表示状態にすることもできます。
    /// </summary>
    [Parameter]
    public States State { get; set; } = States.Hidden;

    /// <summary>
    /// <see cref="State"/> プロパティ値が変更された際に呼び出されるイベントコールバックを取得または設定
    /// </summary>
    [Parameter]
    public EventCallback<States> StateChanged { get; set; }

    /// <summary>
    /// PWAアップデーターコンポーネントをページ上に配置する位置
    /// </summary>
    public enum Aligns
    {
        Top = 0,    // 上部配置
        [Obsolete("It's a typo. Use 'Bottom' instead of 'Buttom'."), EditorBrowsable(EditorBrowsableState.Never)]
        Buttom = 1,
        Bottom = 1  // 下部配置
    }

    /// <summary>
    /// 通知バーUIに表示するテキスト
    /// </summary>
    [Parameter]
    public string? Text { get; set; } = "The new version is ready.";

    /// <summary>
    /// 更新を実行するボタンのキャプションとして表示するテキスト
    /// </summary>
    [Parameter]
    public string? ButtonCaption { get; set; } = "UPDATE NOW";

    /// <summary>
    /// 通知バーの位置を指定する値（<see cref="Aligns.Top"/> または <see cref="Aligns.Bottom"/>）
    /// </summary>
    [Parameter]
    public Aligns Align { get; set; } = Aligns.Top;

    /// <summary>
    /// 通知UIが動作する環境名をカンマ区切りで指定する文字列<br/>
    /// デフォルト値は "Production"
    /// </summary>
    [Parameter]
    public string? EnvironmentsForWork { get; set; } = "Production";

    /// <summary>
    /// PWAアップデートコンポーネントの一部としてレンダリングされるコンテンツを取得または設定
    /// </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    /// <summary>
    /// コンポーネントのレンダリング後処理
    /// 初回レンダリング時にサービスイベントを登録し、
    /// 表示/非表示アニメーションのタイミング制御を行う
    /// </summary>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // PWAアップデーターサービスの新バージョン待機イベントを登録
            this.PWAUpdaterService.NextVersionIsWaiting += PWAUpdaterService_NextVersionIsWaiting;
        }

        // 表示アニメーション（Showing → Shown）
        if (this.State == States.Showing)
        {
            await Task.Delay(200);
            if (this.State == States.Showing)
            {
                this.State = States.Shown;
                await this.StateChanged.InvokeAsync(this.State);
                this.StateHasChanged();
            }
        }

        // 非表示アニメーション（Hiding → Hidden）
        if (this.State == States.Hiding)
        {
            await Task.Delay(500);
            if (this.State == States.Hiding)
            {
                this.State = States.Hidden;
                await this.StateChanged.InvokeAsync(this.State);
                this.StateHasChanged();
            }
        }
    }

    /// <summary>
    /// リソースの解放
    /// コンポーネント破棄時にイベント登録を解除
    /// </summary>
    void IDisposable.Dispose()
    {
        this.PWAUpdaterService.NextVersionIsWaiting -= PWAUpdaterService_NextVersionIsWaiting;
    }

    /// <summary>
    /// PWAアップデーターサービスからの新バージョン待機通知イベントハンドラー
    /// 環境設定に基づいて通知表示の可否を判定し、該当環境でのみUIを表示
    /// </summary>
    private void PWAUpdaterService_NextVersionIsWaiting(object? sender, EventArgs args)
    {
        var environments = this.EnvironmentsForWork?.Split(',').Select(s => s.Trim()).Where(s => s != "") ?? Enumerable.Empty<string>();
        if (!environments.Contains(this.PWAUpdaterService.HostEnvironment) && environments.Any())
        {
            return;
        }

        this.InvokeAsync(() => this.ShowAsync()).ContinueWith(t =>
        {
            if (t.IsFaulted)
            {
                this.Logger.LogError(t.Exception, t.Exception?.Message);
            }
        });
    }

    /// <summary>
    /// 通知バーの表示処理
    /// 非表示または非表示中の状態から表示状態へ遷移
    /// </summary>
    private async Task ShowAsync()
    {
        if (this.State is States.Hidden or States.Hiding)
        {
            this.State = States.Showing;
            await this.StateChanged.InvokeAsync(this.State);
            this.StateHasChanged();
        }
    }

    /// <summary>
    /// 「今すぐ更新」ボタンクリック時の処理
    /// Service Workerの待機状態をスキップしてアップデートを開始
    /// </summary>
    private async Task OnClickUpdateNowAsync()
    {
        await this.PWAUpdaterService.SkipWaitingAsync();
    }

    /// <summary>
    /// 閉じるボタンクリック時の処理
    /// 通知バーを非表示状態に遷移
    /// </summary>
    private async Task OnClickClose()
    {
        if (this.State is not States.Hiding and not States.Hidden)
        {
            this.State = States.Hiding;
            await this.StateChanged.InvokeAsync(this.State);
        }
    }
}