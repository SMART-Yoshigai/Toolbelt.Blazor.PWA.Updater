@using Microsoft.Extensions.Logging
@implements IDisposable
@inject IPWAUpdaterService PWAUpdaterService
@inject ILogger<PWAUpdater> Logger

@if (this.State != States.Hidden)
{
    <div class="@("pwa-updater" + (this.State == States.Shown ? " visible" : "") + (this.Align == Aligns.Top ? " align-top" : " align-bottom"))">
        @ChildContent
        <span>@this.Text</span>
        <button @onclick="OnClickUpdateNowAsync" class="pwa-updater-updatenow-button">@this.ButtonCaption</button>
        <span @onclick="OnClickClose" class="pwa-updater-close-button">✕</span>
    </div>
}

@code {

    /// <summary>
    /// The state of visibility of the PWAUpdater component.
    /// </summary>
    public enum States
    {
        Hidden,
        Showing,
        Shown,
        Hiding
    }

    /// <summary>
    /// Gets or sets the current state of visibility of the component.<br/>
    /// You can set this property from <see cref="States.Shown"/> to <see cref="States.Hiding"/> to be hidden from outside of the component when the component was being appeared.<br/>
    /// And for the other purpose, you can also set this property to <see cref="States.Showing"/> explicitly to be visible forcibly for the purpose of developing custom looks &amp; feels, even when the next version of the service worker does not exist.
    /// </summary>
    [Parameter]
    public States State { get; set; } = States.Hidden;

    /// <summary>
    /// Gets or sets the event callback that will be invoked when the <see cref="State"/> property value changes.
    /// </summary>
    [Parameter]
    public EventCallback<States> StateChanged { get; set; }

    /// <summary>
    /// The position to be placed the PWAUpdater component on the page.
    /// </summary>
    public enum Aligns
    {
        Top,
        Buttom
    }

    /// <summary>
    /// The text that is shown on the notification bar UI.
    /// </summary>
    [Parameter]
    public string? Text { get; set; } = "The new version is ready.";

    /// <summary>
    /// The text that is shown as the caption of the button to trigger updates.
    /// </summary>
    [Parameter]
    public string? ButtonCaption { get; set; } = "UPDATE NOW";

    /// <summary>
    /// The value to specify the position of the notification bar, whether <see cref="Aligns.Top"/> or <see cref="Aligns.Buttom"/>.
    /// </summary>
    [Parameter]
    public Aligns Align { get; set; } = Aligns.Top;

    /// <summary>
    /// The comma-separated string that specifies environment names that the notification UI should work.<br/>
    /// The default value is "Production".
    /// </summary>
    [Parameter]
    public string? EnvironmentsForWork { get; set; } = "Production";

    /// <summary>
    /// Gets or sets the content to be rendered as a part of the PWAUpdate component.
    /// </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            this.PWAUpdaterService.NextVersionIsWaiting += PWAUpdaterService_NextVersionIsWaiting;
        }

        if (this.State == States.Showing)
        {
            await Task.Delay(200);
            if (this.State == States.Showing)
            {
                this.State = States.Shown;
                await this.StateChanged.InvokeAsync(this.State);
                this.StateHasChanged();
            }
        }

        if (this.State == States.Hiding)
        {
            await Task.Delay(500);
            if (this.State == States.Hiding)
            {
                this.State = States.Hidden;
                await this.StateChanged.InvokeAsync(this.State);
                this.StateHasChanged();
            }
        }
    }

    void IDisposable.Dispose()
    {
        this.PWAUpdaterService.NextVersionIsWaiting -= PWAUpdaterService_NextVersionIsWaiting;
    }

    private void PWAUpdaterService_NextVersionIsWaiting(object? sender, EventArgs args)
    {
        var environments = this.EnvironmentsForWork?.Split(',').Select(s => s.Trim()).Where(s => s != "") ?? Enumerable.Empty<string>();
        if (!environments.Contains(this.PWAUpdaterService.HostEnvironment) && environments.Any())
        {
            return;
        }

        this.InvokeAsync(() => this.ShowAsync()).ContinueWith(t =>
        {
            if (t.IsFaulted)
            {
                this.Logger.LogError(t.Exception, t.Exception?.Message);
            }
        });
    }

    private async Task ShowAsync()
    {
        if (this.State is States.Hidden or States.Hiding)
        {
            this.State = States.Showing;
            await this.StateChanged.InvokeAsync(this.State);
            this.StateHasChanged();
        }
    }

    private async Task OnClickUpdateNowAsync()
    {
        await this.PWAUpdaterService.SkipWaitingAsync();
    }

    private async Task OnClickClose()
    {
        if (this.State is not States.Hiding and not States.Hidden)
        {
            this.State = States.Hiding;
            await this.StateChanged.InvokeAsync(this.State);
        }
    }
}